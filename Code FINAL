# Load libraries
library(suncalc)
library(dplyr)
library(lubridate)
library(slider)
library(ggplot2)
library(ggpubr)
library(tidyr)
library(zoo)

# Load datasets
df <- read.csv("SCS_demand_modelling.csv")
df_temp <- read.csv("SCS_hourly_temp.csv")

# Set wdayindex as factor with Saturday as reference
df$wdayindex <- as.factor(df$wdayindex)
df$wdayindex <- relevel(df$wdayindex, ref = "6")

# Set location coordinates
lat <- 52.36701
long <- -1.181587

# Format Date column
df$Date <- as.Date(df$Date, format = "%Y-%m-%d")

# Get sunrise and sunset times
sun_times <- getSunlightTimes(
  date = df$Date, 
  lat = lat, 
  lon = long, 
  keep = c("sunrise", "sunset"),
  tz = "UTC"
)

# Add sunrise and sunset to data
df <- cbind(df, sun_times[, c("sunrise", "sunset")])

# Convert times to POSIXct
df$sunrise <- as.POSIXct(df$sunrise, tz = "UTC")
df$sunset <- as.POSIXct(df$sunset, tz = "UTC")

# Calculate daylight hours
df$daylight <- as.numeric(difftime(df$sunset, df$sunrise, units = "hours"))

# Create squared variables
df$DSN2 <- df$DSN^2
df$daylight2 <- df$daylight^2

# Set Winter as factor with 1991 as reference
df$Winter <- as.factor(df$start_year)
df$Winter <- relevel(df$Winter, ref = "1991")

# Plot demand against DSN
ggplot(df, aes(x = DSN, y = demand_gross)) +
  geom_point(colour = "#3f0630", alpha = 0.75) +
  labs(x = "Days Since 1st November",
       y = "Gross Demand") +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
    axis.text = element_text(size = 10)
  )

ggsave("demand_dsn.png", width = 8, height = 5, dpi = 350)

# Plot maximum demand by winter
peak_demand_per_year <- df %>%
  group_by(start_year) %>%
  summarise(Max_Demand = max(demand_gross, na.rm = TRUE)) %>%
  ungroup()

ggplot(peak_demand_per_year, aes(x = start_year, y = Max_Demand)) +
  geom_line(colour = "#3f0630", linewidth = 0.75) +
  geom_point(size = 2.5, colour = "#c8398b") +
  labs(x = "Winter", y = "Maximum Demand (MW)") +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
    axis.text = element_text(size = 10)
  )

ggsave("demand_winter.png", width = 8, height = 5, dpi = 350)

# Calculate 10-day rolling average temperature
df <- df %>%
  arrange(start_year, DSN) %>%
  group_by(start_year) %>%
  mutate(
    T_rolling10 = zoo::rollmean(temp, k = 7, fill = NA, align = "center"),
    Year_Label = ifelse(start_year == 2013, "2013    ", "Other Winters")
  ) %>%
  ungroup()

# Plot 7-day average temperature for each winter
ggplot(df, aes(x = DSN, y = T_rolling10, group = start_year,
               colour = Year_Label, linewidth = Year_Label, alpha = Year_Label)) +
  geom_line() +
  scale_colour_manual(values = c("2013    " = "#c8398b", "Other Winters" = "#C4C4C4"),
                      guide = guide_legend(override.aes = list(linewidth = 1))) +
  scale_alpha_manual(values = c("2013    " = 1, "Other Winters" = 0.75)) +
  scale_linewidth_manual(values = c("2013    " = 1, "Other Winters" = 0.5)) +
  labs(x = "Days Since 1st November", y = "Temperature (°C, 7-Day Avg)",
       colour = NULL, linewidth = NULL, alpha = NULL) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 16),
    legend.title = element_text(size = 16),
    strip.text = element_blank(),
    axis.title.x = element_text(size = 20, margin = margin(t = 10)),
    axis.title.y = element_text(size = 20, margin = margin(r = 10)), 
    axis.text = element_text(size = 14)
  )

ggsave("10_day_temp.png", width = 8, height = 5, dpi = 350)

# Get coldest 10% of days per winter
df_cold_yearly <- df %>%
  group_by(start_year) %>%
  mutate(temp_10th = quantile(temp, 0.10, na.rm = TRUE)) %>%
  filter(temp <= temp_10th) %>%
  ungroup() %>%
  mutate(
    start_year = as.factor(start_year),
    Highlight = ifelse(start_year == "2013", "2013", "Other")
  )

# Plot distribution of coldest days per winter
ggplot(df_cold_yearly, aes(x = start_year, y = temp, fill = Highlight, colour = Highlight)) +
  geom_violin(alpha = 0.75) +
  scale_fill_manual(values = c("2013" = "#c8398b", "Other" = "#3f0630")) +
  scale_colour_manual(values = c("2013" = "#c8398b", "Other" = "#3f0630")) +
  labs(x = "Winter", y = "Temperature (°C)", fill = NULL) +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)),
    axis.text = element_text(size = 10),
    axis.text.x = element_text(angle = 90, vjust = 0.5, size = 10),
    legend.position = "none"
  )


ggsave("coldest_temp.png", width = 8, height = 5, dpi = 350)

# Calculate 7-day rolling average wind speed
df <- df %>%
  arrange(start_year, DSN) %>%
  group_by(start_year) %>%
  mutate(
    W_rolling10 = zoo::rollmean(wind, k = 7, fill = NA, align = "center"),
    Year_Label = ifelse(start_year == 2013, "2013    ", "Other Winters")
  ) %>%
  ungroup()

# Plot 7-day average wind speed for each winter
ggplot(df, aes(x = DSN, y = W_rolling10, group = start_year,
               colour = Year_Label, linewidth = Year_Label, alpha = Year_Label)) +
  geom_line() +
  scale_colour_manual(values = c("2013    " = "#c8398b", "Other Winters" = "#C4C4C4"),
                      guide = guide_legend(override.aes = list(linewidth = 1))) +
  scale_alpha_manual(values = c("2013    " = 1, "Other Winters" = 0.75)) +
  scale_linewidth_manual(values = c("2013    " = 1, "Other Winters" = 0.5)) +
  labs(x = "Days Since 1st November", y = "Wind Capacity Factor (7-Day Avg)     ",
       colour = NULL, linewidth = NULL, alpha = NULL) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 16),
    legend.title = element_text(size = 16),
    strip.text = element_blank(),
    axis.title.x = element_text(size = 20, margin = margin(t = 10)),
    axis.title.y = element_text(size = 20, margin = margin(r = 10)), 
    axis.text = element_text(size = 14)
  )

ggsave("10_day_wind.png", width = 8, height = 5, dpi = 350)

df_energy <- df %>%
  mutate(
    start_year = as.factor(start_year),
    Highlight = ifelse(start_year == "2013", "2013", "Other")
  )

# Plot distribution of wind speeds per winter
ggplot(df_energy, aes(x = start_year, y = wind, fill = Highlight, colour = Highlight)) +
  geom_violin(alpha = 0.75) +
  scale_fill_manual(values = c("2013" = "#c8398b", "Other" = "#3f0630")) +
  scale_colour_manual(values = c("2013" = "#c8398b", "Other" = "#3f0630")) +
  labs(x = "Winter", y = "Temperature (°C)", fill = NULL) +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)),
    axis.text = element_text(size = 10),
    axis.text.x = element_text(angle = 90, vjust = 0.5, size = 10),
    legend.position = "none"
  )

# Format Date column in temperature data
df_temp$Date <- as.POSIXct(df_temp$Date, format = "%d/%m/%Y %H:%M")

# Extract date and hour
df_temp <- df_temp %>%
  mutate(Date_only = as.Date(Date), Hour = hour(Date))

# Calculate original TO (3–6pm average)
df_TO <- df_temp %>%
  group_by(Date_only) %>%
  summarise(
    TO = mean(temp[Hour %in% c(15, 16, 17, 18)], na.rm = TRUE)
  )

# Calculate new T_11_18 (11am–6pm average)
df_T_11_18 <- df_temp %>%
  group_by(Date_only) %>%
  summarise(
    T_11_18 = mean(temp[Hour %in% c(11:18)], na.rm = TRUE)
  )

# Get temperature at 6pm
df_T_18 <- df_temp %>%
  filter(format(Date, "%H:%M") == "18:00") %>%
  select(Date_only, T_18 = temp)

# Get minimum daily temperature
df_T_min <- df_temp %>%
  group_by(Date_only) %>%
  summarise(T_min = min(temp, na.rm = TRUE))

# Merge daily temperature summaries
df_temp_daily <- df_T_18 %>%
  left_join(df_T_min, by = "Date_only") %>%
  left_join(df_T_11_18, by = "Date_only") %>%
  left_join(df_TO, by = "Date_only")

# Create lagged and smoothed temperature features
df_temp_daily <- df_temp_daily %>%
  arrange(Date_only) %>%
  mutate(
    T_3avg = slide_dbl(TO, mean, .before = 2, .complete = TRUE),
    T_11_18_3avg = slide_dbl(T_11_18, mean, .before = 2, .complete = TRUE),
    T_3avg_centred = slide_dbl(TO, mean, .before = 1, .after = 1, .complete = TRUE),
    T_18_3avg = slide_dbl(T_18, mean, .before = 2, .complete = TRUE),
    T_min_3avg = slide_dbl(T_min, mean, .before = 2, .complete = TRUE),
    T_7avg = slide_dbl(TO, mean, .before = 6, .complete = TRUE),
    T_change = TO - lag(TO, 1),
    T_weighted = 0.5 * T_11_18 + 0.3 * lag(T_11_18, 1) + 0.2 * lag(T_11_18, 2)
  ) %>%
  
  # Compute daily temperature anomaly
  group_by(yday(Date_only)) %>%
  mutate(
    T_anomaly = TO - mean(TO, na.rm = TRUE)
  ) %>%
  ungroup()

# Copy T_11_18 to new TE_11_18 variable
df_temp_daily <- df_temp_daily %>%
  mutate(
    TE_11_18 = T_11_18 
  )

# Create TE_11_18 using lagged values
df_temp_daily <- df_temp_daily %>%
  mutate(TE_11_18 = (T_11_18 + lag(TE_11_18, 1)) / 2)

# Format Date column to match for merging
df <- df %>%
  mutate(Date = as.Date(Date))

# Merge temperature features into main dataset
df <- df %>%
  left_join(df_temp_daily, by = c("Date" = "Date_only"))

# Compute correlation matrix of temperature variables and demand
temp_vars <- df %>%
  select(TE, T_3avg, T_3avg_centred, T_18_3avg, T_min_3avg, T_7avg, T_change, T_weighted, T_anomaly, demand_gross)
cor(temp_vars, use = "complete.obs")

# Remove Christmas period (weeks 52–64)
df <- df %>%
  filter(!(DSN >= 52 & DSN <= 64))

# Plot demand vs DSN with smooth curve
ggplot(df, aes(x = DSN, y = demand_gross)) +
  geom_point(colour = "#3f0630", alpha = 0.75) +
  geom_smooth(colour = "#c8398b", method = "loess", se = FALSE, linewidth = 1.2) +
  labs(x = "DSN", y = "Gross Demand (MW)") +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
    axis.text = element_text(size = 10)
  )

ggsave("dsn.png", width = 8, height = 5, dpi = 350)

# Fit multiple regression models with different temperature variables
model0 <- lm(demand_gross ~ Winter + TE:Winter + wdayindex + DSN + DSN2, data = df)
model1 <- lm(demand_gross ~ Winter + T_3avg:Winter + wdayindex + DSN + DSN2, data = df)
model2 <- lm(demand_gross ~ Winter + T_11_18_3avg:Winter + wdayindex + DSN + DSN2, data = df)
model3 <- lm(demand_gross ~ Winter + TE_11_18:Winter + wdayindex + DSN + DSN2, data = df)
model4 <- lm(demand_gross ~ Winter + T_weighted:Winter + wdayindex + DSN + DSN2, data = df)
model5 <- lm(demand_gross ~ Winter + T_11_18:Winter + wdayindex + DSN + DSN2, data = df)
model6 <- lm(demand_gross ~ Winter + T_weighted:Winter + wdayindex + daylight + daylight2, data = df)
model7 <- lm(demand_gross ~ Winter + T_weighted:Winter + wdayindex + daylight, data = df)
model8 <- lm(demand_gross ~ Winter + T_weighted:Winter + wdayindex + daylight2, data = df)
model9 <- lm(demand_gross ~ Winter + T_weighted:Winter + T_weighted:wind + wdayindex + daylight2, data = df)
model10 <- lm(demand_gross ~ Winter + T_weighted:Winter + T_weighted:solar_S + wdayindex + daylight2, data = df)
# Best model: model6

# Compare model AIC and adjusted R²
models <- list(
  "baseline" = model0,
  "T_3avg" = model1,
  "T_11_18_3avg" = model2,
  "TE_11_18" = model3,
  "T_weighted" = model4,
  "T_11_18" = model5,
  "daylight with squared" = model6,
  "daylight without squared" = model7,
  "daylight just squared" = model8,
  "wind" = model9,
  "solar" = model10
)

# View model performance metrics
model_results <- data.frame(
  AIC = sapply(models, AIC),
  Adjusted_R2 = sapply(models, function(m) summary(m)$adj.r.squared)
)
print(model_results)

# Compare RMSE for selected models
high_demand <- df %>% filter(demand_gross > quantile(demand_gross, 0.90))
RMSE_base <- sqrt(mean(residuals(model0)^2))
RMSE_3day <- sqrt(mean(residuals(model1)^2))
RMSE_11_18 <- sqrt(mean(residuals(model5)^2))
RMSE_6pm <- sqrt(mean(residuals(model4)^2))

# Print RMSE results
print(c("RMSE (18 3-day avg Temp)" = RMSE_3day,
        "RMSE (11-18 Temp)" = RMSE_11_18,
        "RMSE (18 Temp)" = RMSE_6pm,
        "RMSE (Baseline)" = RMSE_base))

# Add predicted values from model6
df <- df %>% mutate(predicted_demand = predict(model6, newdata = df))

# Identify max demand day for each Winter
peak_days <- df %>%
  group_by(Winter) %>%
  filter(demand_gross == max(demand_gross)) %>%
  ungroup()

# Plot actual vs predicted demand
ggplot() +
  geom_point(data = df, aes(x = demand_gross, y = predicted_demand),
             colour = "#C4C4C4", alpha = 0.5) +
  geom_abline(intercept = 0, slope = 1, colour = "#000000", linewidth = 0.75) +
  geom_point(data = peak_days, aes(x = demand_gross, y = predicted_demand),
             colour = "#c8398b", alpha = 0.95, size = 2.5) +
  labs(x = "Actual Demand (MW)", y = "Predicted Demand (MW)") +
  theme_minimal() +
  theme(
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
    axis.text = element_text(size = 10)
  )

ggsave("actual_predicted.png", width = 8, height = 5, dpi = 350)

# Add diagnostics to dataframe
df <- df %>%
  mutate(Fitted = predict(model6),
         Residuals = residuals(model6),
         Std_Residuals = rstandard(model6),
         Leverage = hatvalues(model6),
         CookD = cooks.distance(model6),
         ID = row_number())

# Helper: Compute LOWESS smoothed lines
lowess_fit <- function(x, y) {
  smooth <- lowess(x, y, f = 0.7)
  data.frame(x = smooth$x, y = smooth$y)
}

# LOWESS for diagnostic plots
lowess_p1 <- lowess_fit(df$Fitted, df$Residuals)
lowess_p3 <- lowess_fit(df$Fitted, sqrt(abs(df$Std_Residuals)))
lowess_p4 <- lowess_fit(df$Leverage, df$Std_Residuals)

# Residuals vs Fitted
p1 <- ggplot(df, aes(x = Fitted, y = Residuals)) +
  geom_point(color = "#3f0630", alpha = 0.5) +
  geom_line(data = lowess_p1, aes(x = x, y = y), color = "#c8398b", linewidth = 0.75) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "#000000") +
  theme_minimal() +
  labs(title = "Residuals vs Fitted", x = "Fitted Values", y = "Residuals")

# Normal Q-Q Plot
qq_data <- data.frame(sample = df$Std_Residuals)
p2 <- ggplot(qq_data, aes(sample = sample)) +
  stat_qq(color = "#3f0630", alpha = 0.5) +
  stat_qq_line(linetype = "dashed", color = "#000000") +
  theme_minimal() +
  labs(title = "Normal Q-Q Plot", x = "Theoretical Quantiles", y = "Standardized Residuals")

# Scale-Location Plot
p3 <- ggplot(df, aes(x = Fitted, y = sqrt(abs(Std_Residuals)))) +
  geom_point(color = "#3f0630", alpha = 0.5) +
  geom_line(data = lowess_p3, aes(x = x, y = y), color = "#c8398b", linewidth = 0.75) +
  theme_minimal() +
  labs(title = "Scale-Location Plot", x = "Fitted Values", y = "√|Standardized Residuals|")

# Residuals vs Leverage
p4 <- ggplot(df, aes(x = Leverage, y = Std_Residuals)) +
  geom_point(color = "#3f0630", alpha = 0.5) +
  geom_line(data = lowess_p4, aes(x = x, y = y), color = "#c8398b", linewidth = 0.75) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "#000000") +
  theme_minimal() +
  coord_cartesian(xlim = c(0, max(df$Leverage) * 1.05)) +
  labs(title = "Residuals vs Leverage", x = "Leverage", y = "Standardized Residuals")

# Arrange and save diagnostic plots
ggarrange(p1, p2, p3, p4, ncol = 2, nrow = 2)
ggsave("res_plots.png", width = 8, height = 5, dpi = 350)

# Reshape demand data to long format
df_long <- df %>%
  select(Date, demand_gross, predicted_demand) %>%
  pivot_longer(cols = c(demand_gross, predicted_demand),
               names_to = "Type", values_to = "Demand") %>%
  mutate(Type = recode(Type,
                       demand_gross = "Actual",
                       predicted_demand = "Predicted"))

# Time series plot of actual vs predicted demand
ggplot(df_long, aes(x = Date, y = Demand, colour = Type)) +
  geom_line(linewidth = 0.5) +
  facet_wrap(~Type, ncol = 1, scales = "fixed") +
  labs(x = "Time", y = "Demand (MW)", colour = NULL) +
  scale_colour_manual(values = c("Actual" = "#3f0630", "Predicted" = "#c8398b"),
                      guide = guide_legend(override.aes = list(linewidth = 1.5))) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16),
    strip.text = element_blank(),
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
    axis.text = element_text(size = 10)
  )

ggsave("demand_time.png", width = 8, height = 5, dpi = 350)

# Reshape demand data for full distribution plot
df_long <- df %>%
  select(demand_gross, predicted_demand) %>%
  pivot_longer(cols = everything(),
               names_to = "Type", values_to = "Demand") %>%
  mutate(Type = recode(Type,
                       demand_gross = "Actual Demand    ",
                       predicted_demand = "Predicted Demand"))

# Density plot of full demand distribution
ggplot(df_long, aes(x = Demand, colour = Type)) +
  geom_density(na.rm = TRUE, linewidth = 0.75) +
  scale_colour_manual(values = c("Actual Demand    " = "#3f0630", "Predicted Demand" = "#c8398b"),
                      guide = guide_legend(override.aes = list(linewidth = 1))) +
  labs(x = "Demand (MW)", y = "Density", colour = NULL) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16),
    strip.text = element_blank(),
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
    axis.text = element_text(size = 10)
  )

ggsave("full_demand_pdf.png", width = 8, height = 5, dpi = 350)

# Define zoom range for top demand
upper_bound <- max(df$demand_gross, na.rm = TRUE)
lower_bound <- quantile(df$demand_gross, 0.95, na.rm = TRUE)
q99 <- quantile(df$demand_gross, 0.99, na.rm = TRUE)

# Get max density values for scaling
density_actual <- density(df$demand_gross, na.rm = TRUE)
density_predicted <- density(df$predicted_demand, na.rm = TRUE)
y_upper_limit <- 0.5 * max(max(density_actual$y, na.rm = TRUE),
                           max(density_predicted$y, na.rm = TRUE))

# Zoomed-in density plot of top 5% demand
ggplot(df_long, aes(x = Demand, colour = Type)) +
  geom_density(na.rm = TRUE, linewidth = 0.75) +
  scale_colour_manual(values = c("Actual Demand    " = "#3f0630", "Predicted Demand" = "#c8398b"),
                      guide = guide_legend(override.aes = list(linewidth = 1))) +
  labs(x = "Demand (MW)", y = "Density", colour = NULL) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16),
    strip.text = element_blank(),
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
    axis.text = element_text(size = 10)
  ) +
  coord_cartesian(xlim = c(lower_bound, upper_bound), ylim = c(0, y_upper_limit))

ggsave("crop_demand_pdf.png", width = 8, height = 5, dpi = 350)

# Filter top 5% of demand values
q95 <- quantile(df$demand_gross, 0.95, na.rm = TRUE)
df_q95 <- df %>% filter(demand_gross >= q95)

# Reshape filtered data for plot
df_q95_long <- df_q95 %>%
  select(demand_gross, predicted_demand) %>%
  pivot_longer(cols = everything(),
               names_to = "Type", values_to = "Demand") %>%
  mutate(Type = recode(Type,
                       demand_gross = "Actual Demand    ",
                       predicted_demand = "Predicted Demand"))

# Density plot for top 5% of demand
ggplot(df_q95_long, aes(x = Demand, colour = Type)) +
  geom_density(na.rm = TRUE, linewidth = 0.75) +
  scale_colour_manual(values = c("Actual Demand    " = "#3f0630", "Predicted Demand" = "#c8398b"),
                      guide = guide_legend(override.aes = list(linewidth = 1))) +
  labs(x = "Demand (MW)", y = "Density", colour = NULL) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16),
    strip.text = element_blank(),
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
    axis.text = element_text(size = 10)
  )

ggsave("95_demand_pdf.png", width = 8, height = 5, dpi = 350)


## Quantile Regression
# Load libraries
library(quantreg)
library(dplyr)

# Define model formulas
models <- list(
  "Model 0" = demand_gross ~ Winter + TE:Winter + wdayindex + DSN + DSN2,
  "Model 1" = demand_gross ~ Winter + T_3avg:Winter + wdayindex + DSN + DSN2,
  "Model 2" = demand_gross ~ Winter + T_11_18_3avg:Winter + wdayindex + DSN + DSN2,
  "Model 3" = demand_gross ~ Winter + TE_11_18:Winter + wdayindex + DSN + DSN2,
  "Model 4" = demand_gross ~ Winter + T_weighted:Winter + wdayindex + DSN + DSN2,
  "Model 5" = demand_gross ~ Winter + T_11_18:Winter + wdayindex + DSN + DSN2,
  "Model 6" = demand_gross ~ Winter + T_weighted:Winter + wdayindex + daylight + daylight2,
  "Model 7" = demand_gross ~ Winter + T_weighted:Winter + wdayindex + daylight,
  "Model 8" = demand_gross ~ Winter + T_weighted:Winter + wdayindex + daylight2,
  "Model 9" = demand_gross ~ Winter + T_weighted:Winter + wind + wdayindex + daylight + daylight2,
  "Model 10" = demand_gross ~ Winter + T_weighted:Winter + wind + solar_S + wdayindex + daylight + daylight2,
  "Model 11" = demand_gross ~ Winter + T_weighted:Winter + solar_S + wdayindex + daylight + daylight2,
  "Model 12" = demand_gross ~ Winter + T_weighted:Winter + wind:Winter + wdayindex + daylight + daylight2,
  "Model 13" = demand_gross ~ Winter + T_weighted:Winter + solar_S:Winter + wdayindex + daylight + daylight2,
  "Model 14" = demand_gross ~ Winter + T_weighted:Winter + wind:Winter + solar_S:Winter + wdayindex + daylight + daylight2,
  "Model 15" = demand_gross ~ Winter + T_weighted:Winter + T_weighted:solar_S + wdayindex + daylight + daylight2,
  "Model 16" = demand_gross ~ Winter + T_weighted:Winter + I(TO.x < 5) + wdayindex + daylight + daylight2,
  "Model 17" = demand_gross ~ Winter + T_weighted:Winter + T_weighted:wind + wdayindex + daylight + daylight2
)
# Best model: Model 10

# Fit quantile regression models at tau = 0.95
fitted_models <- lapply(models, function(f) rq(f, tau = 0.95, data = df))

# Pinball loss function
pinball_loss <- function(model, data) {
  response <- all.vars(model$terms)[1]
  y <- data[[response]]
  y_pred <- predict(model, newdata = data)
  tau <- model$tau
  mean((y - y_pred) * (tau - (y < y_pred)))
}

# GCV for quantile regression
gcv_qr <- function(model, data) {
  y <- data[[all.vars(model$terms)[1]]]
  n <- length(y)
  p <- length(coef(model))
  loss <- pinball_loss(model, data)
  loss / ((1 - p / n)^2)
}

# AIC and BIC for quantile regression
aic_bic_qr <- function(model, data) {
  n <- length(model$residuals)
  p <- length(coef(model))
  loss <- pinball_loss(model, data)
  AIC_q <- n * log(loss) + 2 * p
  BIC_q <- n * log(loss) + p * log(n)
  c(AIC_q = AIC_q, BIC_q = BIC_q)
}

# Evaluate all models
model_results <- data.frame(
  Model = names(fitted_models),
  Pinball = sapply(fitted_models, function(m) pinball_loss(m, df)),
  GCV = sapply(fitted_models, function(m) gcv_qr(m, df)),
  AIC = sapply(fitted_models, function(m) aic_bic_qr(m, df)[1]),
  BIC = sapply(fitted_models, function(m) aic_bic_qr(m, df)[2])
)

# Print summary table
print(model_results)

# Fit best model separately at tau = 0.95
model_quant <- rq(demand_gross ~ Winter + T_weighted:Winter + wind + solar_S + wdayindex + daylight + daylight2, tau = 0.95, data = df)

# Add predicted values to dataset
df <- df %>% mutate(predicted_demand_quant = predict(model_quant))

# Find peak demand day in each winter
peak_days <- df %>%
  group_by(Winter) %>%
  filter(demand_gross == max(demand_gross)) %>%
  ungroup()

# Plot actual vs predicted (quantile model)
ggplot() +
  geom_point(data = df, aes(x = demand_gross, y = predicted_demand_quant),
             colour = "#C4C4C4", alpha = 0.5) +
  geom_abline(intercept = 0, slope = 1, colour = "#000000", linewidth = 0.75) +
  geom_point(data = peak_days, aes(x = demand_gross, y = predicted_demand_quant),
             colour = "#c8398b", alpha = 0.95, size = 2.5) +
  labs(x = "Actual Demand (MW)", y = "Predicted Demand (MW)") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16),
    strip.text = element_blank(),
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
    axis.text = element_text(size = 10)
  )

ggsave("actual_predicted_quant.png", width = 8, height = 5, dpi = 350)

# Reshape for density plot
df_long <- df %>%
  select(demand_gross, predicted_demand_quant) %>%
  pivot_longer(cols = everything(),
               names_to = "Type", values_to = "Demand") %>%
  mutate(Type = recode(Type,
                       demand_gross = "Actual Demand    ",
                       predicted_demand_quant = "Predicted Demand"))

# Density plot (full range)
ggplot(df_long, aes(x = Demand, colour = Type)) +
  geom_density(na.rm = TRUE, linewidth = 0.75) +
  scale_colour_manual(values = c("Actual Demand    " = "#3f0630", "Predicted Demand" = "#c8398b"),
                      guide = guide_legend(override.aes = list(linewidth = 1))) +
  labs(x = "Demand (MW)", y = "Density", colour = NULL) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16),
    strip.text = element_blank(),
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
    axis.text = element_text(size = 10)
  )

ggsave("full_demand_pdf_quant.png", width = 8, height = 5, dpi = 350)

# Filter top 5% of demand
q95 <- quantile(df$demand_gross, 0.95, na.rm = TRUE)
df_q95 <- df %>% filter(demand_gross >= q95)

# Reshape for density plot (top 5%)
df_q95_long <- df_q95 %>%
  select(demand_gross, predicted_demand_quant) %>%
  pivot_longer(cols = everything(),
               names_to = "Type", values_to = "Demand") %>%
  mutate(Type = recode(Type,
                       demand_gross = "Actual Demand    ",
                       predicted_demand_quant = "Predicted Demand"))

# Density plot (top 5%)
ggplot(df_q95_long, aes(x = Demand, colour = Type)) +
  geom_density(na.rm = TRUE, linewidth = 0.75) +
  scale_colour_manual(values = c("Actual Demand    " = "#3f0630", "Predicted Demand" = "#c8398b"),
                      guide = guide_legend(override.aes = list(linewidth = 1))) +
  labs(x = "Demand (MW)", y = "Density", colour = NULL) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 14),
    legend.title = element_text(size = 16),
    strip.text = element_blank(),
    axis.title.x = element_text(size = 16, margin = margin(t = 10)),
    axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
    axis.text = element_text(size = 10)
  )

ggsave("95_demand_pdf_quant.png", width = 8, height = 5, dpi = 350)


## Scenario Analysis
# Fit full model
model_full <- lm(demand_gross ~ Winter + T_weighted:Winter + wdayindex + daylight + daylight2, data = df)

# Compute and plot ACF of residuals
acf_data <- acf(residuals(model_full), plot = FALSE, lag.max = 50)
acf_df <- with(acf_data, data.frame(Lag = lag, ACF = acf))

ggplot(acf_df, aes(x = Lag, y = ACF)) +
  geom_hline(yintercept = 0, colour = "#000000", linewidth = 1) +
  geom_segment(aes(xend = Lag, yend = 0), colour = "#3f0630", linewidth = 1) +
  geom_hline(yintercept = c(-1.96 / sqrt(acf_data$n.used), 1.96 / sqrt(acf_data$n.used)),
             linetype = "dashed", colour = "#c8398b", linewidth = 1) +
  labs(x = "Lag (Days)", y = "Autocorrelation Function") +
  theme_minimal() +
  theme(axis.title.x = element_text(size = 20, margin = margin(t = 10)),
    axis.title.y = element_text(size = 20, margin = margin(r = 10)), 
    axis.text = element_text(size = 14)
  )

ggsave("acf.png", width = 8, height = 5, dpi = 350)

# Set bootstrap parameters
block_size <- 5
B <- 1000
set.seed(123)

# Exclude 2013 data for bootstrap
df_no_2013 <- df %>% filter(Winter != "2013")

# Function to generate one block-resampled dataset
generate_block_sample <- function(data, block_size, n_obs) {
  starts <- sample(1:(nrow(data) - block_size + 1), ceiling(n_obs / block_size), replace = TRUE)
  indices <- unlist(lapply(starts, function(s) s:(s + block_size - 1)))
  indices <- indices[1:n_obs]
  data[indices, ]
}

# Bootstrap loop (linear model)
boot_coefs_block <- replicate(B, {
  boot_data <- generate_block_sample(df_no_2013, block_size, nrow(df_no_2013))
  model <- lm(demand_gross ~ Winter + T_weighted:Winter + wdayindex + daylight + daylight2, data = boot_data)
  coef(model)
}, simplify = FALSE)

# Combine bootstrap coefficients
boot_coefs_mat <- do.call(rbind, boot_coefs_block)

# Reinsert Winter2013 coefficients
model_no_2013 <- lm(demand_gross ~ Winter + T_weighted:Winter + wdayindex + daylight + daylight2, data = df_no_2013)
full_names <- names(coef(model_full))
reduced_names <- names(coef(model_no_2013))
winter2013_coefs <- coef(model_full)[c("Winter2013", "Winter2013:T_weighted")]

boot_coefs_full <- t(apply(boot_coefs_mat, 1, function(row) {
  row_named <- setNames(row, reduced_names)
  row_named <- c(row_named, winter2013_coefs)
  row_named[full_names]
}))

# Build synthetic 2013 scenario data using past weather
scenario_base <- df %>% filter(Winter == "2013") %>% select(Winter, wdayindex, DSN)
years <- 1991:2012

weather_data <- lapply(years, function(y) {
  weather_y <- df %>% filter(Winter == y) %>% select(T_weighted, daylight, daylight2, DSN)
  left_join(scenario_base, weather_y, by = "DSN") %>% select(-DSN)
})
names(weather_data) <- paste0("weather_", years)

# Build model matrices
model_matrices <- lapply(weather_data, function(data) {
  model.matrix(~ Winter + T_weighted:Winter + wdayindex + daylight + daylight2, data = data)
})
names(model_matrices) <- names(weather_data)

# Predict max demand for each scenario
max_values_per_year <- lapply(model_matrices, function(mat) {
  preds <- mat %*% t(boot_coefs_full)
  apply(preds, 2, max)
})

# Format for plotting
year_labels <- as.character(years)
max_df <- bind_rows(lapply(seq_along(max_values_per_year), function(i) {
  data.frame(Year = year_labels[i], Max_Predicted = max_values_per_year[[i]])
}))
max_df$Year <- factor(max_df$Year, levels = year_labels)

summary_df <- max_df %>%
  group_by(Year) %>%
  summarise(
    Mean = mean(Max_Predicted),
    Lower = quantile(Max_Predicted, 0.025),
    Upper = quantile(Max_Predicted, 0.975)
  )

# Plot results
peak_2013 <- max(df %>% filter(Winter == "2013") %>% pull(demand_gross), na.rm = TRUE)
ggplot(summary_df, aes(x = Year, y = Mean)) +
  geom_errorbar(aes(ymin = Lower, ymax = Upper), width = 0.5, colour = "#3f0630", linewidth = 0.75) +
  geom_point(colour = "#c8398b", size = 3.5) +
  geom_hline(yintercept = peak_2013, colour = "#000000", linetype = "dashed", linewidth = 0.75) +
  labs(x = "Winter", y = "Max Predicted Demand (MW)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
        axis.title.x = element_text(size = 16, margin = margin(t = 10)),
        axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
        axis.text = element_text(size = 10)
  )

ggsave("scenario_analysis.png", width = 8, height = 5, dpi = 350)

# Repeat for quantile regression (τ = 0.95)
block_size <- 5
B <- 1000
set.seed(123)
df_no_2013 <- df %>% filter(Winter != "2013")

# Fit full model
model_quant_full <- rq(demand_gross ~ Winter + T_weighted:Winter + wind + solar_S + wdayindex + daylight + daylight2,
                       tau = 0.95, data = df)

# Compute and plot ACF of residuals
acf_data_quant <- acf(residuals(model_quant_full), plot = FALSE, lag.max = 50)
acf_df_quant <- with(acf_data_quant, data.frame(Lag = lag, ACF = acf))

ggplot(acf_df_quant, aes(x = Lag, y = ACF)) +
  geom_hline(yintercept = 0, colour = "#000000", linewidth = 1) +
  geom_segment(aes(xend = Lag, yend = 0), colour = "#3f0630", linewidth = 1) +
  geom_hline(yintercept = c(-1.96 / sqrt(acf_data$n.used), 1.96 / sqrt(acf_data$n.used)),
             linetype = "dashed", colour = "#c8398b", linewidth = 1) +
  labs(x = "Lag (Days)", y = "Autocorrelation Function") +
  theme_minimal() +
  theme(axis.title.x = element_text(size = 20, margin = margin(t = 10)),
        axis.title.y = element_text(size = 20, margin = margin(r = 10)), 
        axis.text = element_text(size = 14)
  )

ggsave("acf_quant.png", width = 8, height = 5, dpi = 350)

# Bootstrap loop (quantile regression)
boot_coefs_qr <- replicate(B, {
  boot_data <- generate_block_sample(df_no_2013, block_size, nrow(df_no_2013))
  model <- rq(demand_gross ~ Winter + T_weighted:Winter + wind + solar_S + wdayindex + daylight + daylight2,
              tau = 0.95, data = boot_data)
  coef(model)
}, simplify = FALSE)

boot_coefs_mat_qr <- do.call(rbind, boot_coefs_qr)

# Reinsert Winter2013 coefficients
model_quant_no_2013 <- rq(demand_gross ~ Winter + T_weighted:Winter + wind + solar_S + wdayindex + daylight + daylight2,
                          tau = 0.95, data = df_no_2013)

full_names_qr <- names(coef(model_quant_full))
reduced_names_qr <- names(coef(model_quant_no_2013))
winter2013_coefs_qr <- coef(model_quant_full)[c("Winter2013", "Winter2013:T_weighted")]

boot_coefs_full_qr <- t(apply(boot_coefs_mat_qr, 1, function(row) {
  row_named <- setNames(row, reduced_names_qr)
  row_named <- c(row_named, winter2013_coefs_qr)
  row_named[full_names_qr]
}))

# Rebuild synthetic 2013 data (quantile model)
scenario_base <- df %>% filter(Winter == "2013") %>% select(Winter, wdayindex, DSN)

weather_data_qr <- lapply(years, function(y) {
  weather_y <- df %>% filter(Winter == y) %>% select(wind, solar_S, T_weighted, daylight, daylight2, DSN)
  left_join(scenario_base, weather_y, by = "DSN") %>% select(-DSN)
})
names(weather_data_qr) <- paste0("weather_", years)
8
model_matrices_qr <- lapply(weather_data_qr, function(data) {
  model.matrix(~ Winter + T_weighted:Winter + wind + solar_S + wdayindex + daylight + daylight2, data = data)
})
names(model_matrices_qr) <- names(weather_data_qr)

# Predict max demand per year
max_values_per_year_qr <- lapply(model_matrices_qr, function(mat) {
  preds <- mat %*% t(boot_coefs_full_qr)
  apply(preds, 2, max)
})

# Format results
max_df_qr <- bind_rows(lapply(seq_along(max_values_per_year_qr), function(i) {
  data.frame(Year = year_labels[i], Max_Predicted = max_values_per_year_qr[[i]])
}))
max_df_qr$Year <- factor(max_df_qr$Year, levels = year_labels)

summary_df_qr <- max_df_qr %>%
  group_by(Year) %>%
  summarise(
    Mean = mean(Max_Predicted),
    Lower = min(Max_Predicted),
    Upper = max(Max_Predicted)
  )

# Plot quantile scenario results
ggplot(summary_df_qr, aes(x = Year, y = Mean)) +
  geom_errorbar(aes(ymin = Lower, ymax = Upper), width = 0.5, colour = "#3f0630", linewidth = 0.75) +
  geom_point(colour = "#c8398b", size = 3.5) +
  geom_hline(yintercept = peak_2013, colour = "#000000", linetype = "dashed", linewidth = 0.75) +
  labs(x = "Winter", y = "Max Predicted Demand (MW)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
        axis.title.x = element_text(size = 16, margin = margin(t = 10)),
        axis.title.y = element_text(size = 16, margin = margin(r = 10)), 
        axis.text = element_text(size = 10)
  )

ggsave("scenario_analysis_quant_full.png", width = 8, height = 5, dpi = 350)
